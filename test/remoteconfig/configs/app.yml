base:
  # Debug mode, enables debug mode for gorm and gin
  # Note: Conflicts with the log configuration in db, gorm native debug takes precedence
  debug: true

  # Application or system name, just ensure uniqueness within the same runtime environment
  app: gofusion

  # remote configuration
  config:
    # Name of the configuration profile. In this example, 'default'.
    # This profile's settings will override the default component configurations.
    default:
      # The type of the configuration center. Currently, only 'apollo' is supported.
      type: apollo
      # Determines if the application must successfully fetch the configuration on its first attempt to start.
      must_start: true
      apollo:
        # The App ID for this application in Apollo.
        app_id: gofusion
        # The name of the Apollo cluster.
        cluster: default
        # The namespace(s) to listen to. Multiple namespaces can be specified,
        # separated by a comma (e.g., "application,application.yaml").
        namespaces: app.yaml
        # The address of the Apollo meta server (Config Service).
        endpoint: http://apollo-config:8080
        # Enable local backup. If true, configurations fetched from Apollo will be saved to a local file.
        # This allows the application to use the last known configuration if the Apollo service is down.
        is_backup_config: true
        # Path for the backup file. For example, './' saves the file in the current working directory.
        backup_config_path: ./
        # The secret key used for accessing namespaces with access control.
        secret: "e16e6897b788a18357a79a834f37e492f155c879"
        # The label used for gray releases.
        label: ""
        # Timeout for fetching configurations from the server. The default is 10s. The unit is seconds.
        sync_server_timeout: 10s
    json:
      type: apollo
      must_start: false
      apollo:
        app_id: gofusion
        cluster: default
        namespaces: app.json
        endpoint: http://apollo-config:8080
        is_backup_config: false
        secret: "e16e6897b788a18357a79a834f37e492f155c879"
    txt:
      type: apollo
      must_start: false
      apollo:
        app_id: gofusion
        cluster: default
        namespaces: test.txt
        endpoint: http://apollo-config:8080
        is_backup_config: false
        secret: "e16e6897b788a18357a79a834f37e492f155c879"
    etcd:
      type: kv
      must_start: false
      kv:
        endpoint_configs:
          - provider: etcd3
            endpoints: etcd:2379
            path: gofusion/etcd
          - provider: consul
            endpoints: consul:8500
            path: gofusion/etcd
    consul:
      type: kv
      must_start: false
      kv:
        endpoint_configs:
          - provider: consul
            endpoints: consul:8500
            path: gofusion/consul
  crypto:
    config:
      mode: gcm
      algorithm: sm4
      key_base64: MTIzNDU2NzhhYmNkZWZnaA== # 12345678abcdefgh
      confuse_key: true
      output_algorithm: base64
    custom:
      gorm:
        mode: gcm
        algorithm: sm4
        key_base64: MTIzNDU2NzhhYmNkZWZnaA== # 12345678abcdefgh
        confuse_key: true
        output_algorithm: base64

  http:
    port: 9001

  i18n:
    default_lang: zh

  goroutine_pool:
    max_routine_amount: -1
    max_release_time_per_pool: 3h
    force_sync: false
    enable_logger: false
    logger: github.com/wfusion/gofusion/log/customlogger.routineLogger
    log_instance: default

  log:
    default:
      enable_console_output: true
      enable_file_output: true

  kv:
    etcd:
      type: etcd
      enable_logger: true
      endpoint:
        addresses: [ "etcd:2379" ]
        dial_timeout: 5s
    consul:
      type: consul
      enable_logger: true
      endpoint:
        addresses: [ "consul:8500" ]
        dial_timeout: 5s